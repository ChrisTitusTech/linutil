{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the LinUtil Documentation!","text":""},{"location":"#running-the-latest-release-of-linutil","title":"Running the latest release of LinUtil","text":"<p>To get started, run the following command in your terminal:</p>"},{"location":"#stable-branch","title":"Stable branch","text":""},{"location":"#curl-fssl-httpschristituscomlinux-sh","title":"<pre><code>curl -fsSL https://christitus.com/linux | sh\n</code></pre>","text":""},{"location":"#installation","title":"Installation","text":"<p>LinUtil is also available as a package in various repositories:</p> <p></p> Arch Linux  LinUtil can be installed on [Arch Linux](https://archlinux.org) with three different [AUR](https://aur.archlinux.org) packages:  - `linutil` - Stable release compiled from source - `linutil-bin` - Stable release pre-compiled - `linutil-git` - Compiled from the last commit (not recommended)  by running:  <pre><code>git clone https://aur.archlinux.org/&lt;package&gt;.git\ncd linutil\nmakepkg -si\n</code></pre>  Replace `` with your preferred package.  If you use [yay](https://github.com/Jguer/yay), [paru](https://github.com/Morganamilo/paru) or any other [AUR Helper](https://wiki.archlinux.org/title/AUR_helpers), it's even simpler:  <pre><code>paru -S linutil\n</code></pre>  Replace `paru` with your preferred helper and `linutil` with your preferred package.   Cargo  LinUtil can be installed via [Cargo](https://doc.rust-lang.org/cargo) with:  <pre><code>cargo install linutil\n</code></pre>  Note that crates installed using `cargo install` require manual updating with `cargo install --force` (update functionality is [included in LinUtil](https://christitustech.github.io/linutil/userguide/#applications-setup))   <p>After you've ran the command, you should see a GUI on your screen; It will look something like this:</p> <p></p> <p>Info</p> <p>LinUtil is updated weekly as of the time of writing. Consequently, features and functionalities may evolve, and the documentation may not always reflect the most current images or information.</p>"},{"location":"KnownIssues/","title":"Known Issues","text":"<ul> <li>Known Issues</li> </ul>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>\\n\\n# Contributing Guidelines for Linutil</p> <p>Thank you for considering contributing to Linutil! We appreciate your effort in helping improve this project. To ensure that your contributions align with the goals and quality standards of Linutil, please follow these guidelines:</p>"},{"location":"contributing/#1-install-rust","title":"1. Install Rust:","text":"<p>Make sure you have Rust installed on your machine. You can install it by following the instructions at rust-lang.org.</p>"},{"location":"contributing/#2-fork-and-clone-the-repo","title":"2. Fork and Clone the repo","text":"<ol> <li>Make a fork of the repo in GitHub</li> <li>Clone the fork <code>bash git clone https://github.com/YOUR_USERNAME_HERE/linutil.git cd linutil</code></li> </ol>"},{"location":"contributing/#3-make-your-changes","title":"3. Make your changes","text":"<ul> <li>Edit the files you want to change: Make your changes to the relevant files.</li> <li>Test your changes: Run <code>cargo run</code> to test your modifications in a local environment and ensure everything works as expected.</li> </ul>"},{"location":"contributing/#4-understand-the-existing-code","title":"4. Understand the existing code","text":"<ul> <li>Have a clear reason: Don\u2019t change the way things are done without a valid reason. If you propose an alteration, be prepared to explain why it\u2019s necessary and how it improves the project.</li> <li>Respect existing conventions: Changes should align with the existing code style, design patterns, and overall project philosophy. If you want to introduce a new way of doing things, justify it clearly.</li> </ul>"},{"location":"contributing/#5-learn-from-past-pull-requests-prs","title":"5. Learn from Past Pull Requests (PRs)","text":"<ul> <li>Check merged PRs: Reviewing merged pull requests can give you an idea of what kind of contributions are accepted and how they are implemented.</li> <li>Study rejected PRs: This is especially important as it helps you avoid making similar mistakes or proposing changes that have already been considered and declined.</li> </ul>"},{"location":"contributing/#6-write-clean-descriptive-commit-messages","title":"6. Write Clean, Descriptive Commit Messages","text":"<ul> <li>Be descriptive: Your commit messages should clearly describe what the change does and why it was made.</li> <li>Use the imperative mood: For example, \"Add feature X\" or \"Fix bug in Y\", rather than \"Added feature X\" or \"Fixed bug in Y\".</li> <li>Keep commits clean: Avoid committing a change and then immediately following it with a fix for that change. Instead, amend your commit or squash it if needed.</li> </ul>"},{"location":"contributing/#7-keep-your-pull-requests-prs-small-and-focused","title":"7. Keep Your Pull Requests (PRs) Small and Focused","text":"<ul> <li>Make small, targeted PRs: Focus on one feature or fix per pull request. This makes it easier to review and increases the likelihood of acceptance.</li> <li>Avoid combining unrelated changes: PRs that tackle multiple unrelated issues are harder to review and might be rejected because of a single problem.</li> </ul>"},{"location":"contributing/#8-understand-and-test-the-code-you-write","title":"8. Understand and Test the Code You Write","text":"<ul> <li>Review your code: Before submitting your changes, take the time to review your code for readability, efficiency and performance. Consider how your changes affect the project.</li> <li>Avoid using LLMs: Don't submit AI-generated code without reviewing and testing it first. Ensure that any code you submit is thoroughly understood and meets the project's standards.</li> <li>Testing Requirements: Failure to conduct testing after multiple requests may result in the closure of your Pull Request.</li> </ul>"},{"location":"contributing/#9-code-review-and-feedback","title":"9. Code Review and Feedback","text":"<ul> <li>Expect feedback: PRs will undergo code review. Be open to feedback and willing to make adjustments as needed.</li> <li>Participate in reviews: If you feel comfortable, review other contributors' PRs as well. Peer review is a great way to learn and ensure high-quality contributions.</li> </ul>"},{"location":"contributing/#10-contributing-is-more-than-just-code","title":"10. Contributing Is More Than Just Code","text":"<ul> <li>Test the tool: Running tests and providing feedback on how the tool works in different environments is a valuable contribution.</li> <li>Write well-formed issues: Clearly describe bugs or problems you encounter, providing as much detail as possible, including steps to reproduce the issue.</li> <li>Propose reasonable feature requests: When suggesting new features, ensure they fit within the scope, style, and design of the project. Provide clear reasoning and use cases.</li> </ul>"},{"location":"contributing/#11-documentation","title":"11. Documentation","text":"<ul> <li>Update the documentation: If your change affects the functionality, please update the relevant documentation files to reflect this.</li> </ul>"},{"location":"contributing/#12-license","title":"12. License","text":"<ul> <li>Agree to the license: By contributing to Linutil, you agree that your contributions will be licensed under the project's MIT license.</li> </ul> <p>We appreciate your contributions and look forward to collaborating with you to make Linutil better!</p>"},{"location":"faq/","title":"FAQ's","text":""},{"location":"faq/#how-do-i-uninstall-linutil","title":"How do I uninstall LinUtil?","text":"<ul> <li>You do not have to uninstall LinUtil. As it is a script you run from your terminal it only loads into your RAM. This means as soon as you close LinUtil it will be deleted off your system.</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#vision","title":"Vision","text":"<ul> <li>To simplify linux tasks for all users for all distributions; Easily, efficiently, and effortlessly.</li> </ul>"},{"location":"roadmap/#goals","title":"Goals","text":"<ul> <li> Focus on tasks that take time in Linux and automate them. (Example: Removing a user, adding a user, etc. - but mostly BASH scripts with POSIX compliance.)</li> <li> Remove Binary linutil from being tracked in git and make it a github action.</li> <li> Document every function and feature of linutil. (Preview panel description addition)</li> <li> Create a discord server for linutil and invite the community.</li> <li> Power Optimizations for Laptops</li> </ul>"},{"location":"roadmap/#milestones","title":"Milestones","text":""},{"location":"roadmap/#q3-2024","title":"Q3 2024","text":"<ul> <li> Finish the foundation of the project in CLI mode.</li> <li> DENY ALL GUI Pull Requests while CLI and foundation is being established.</li> </ul>"},{"location":"roadmap/#q4-2024","title":"Q4 2024","text":"<ul> <li> GUI Brainstorming and Planning</li> <li> GUI Implementation towards the end of Q4</li> </ul>"},{"location":"roadmap/#community-feedback","title":"Community Feedback","text":"<ul> <li>Encourage community input and suggestions for future development.</li> </ul>"},{"location":"userguide/","title":"User Guide","text":""},{"location":"userguide/#walkthrough","title":"Walkthrough","text":""},{"location":"userguide/#applications-setup","title":"Applications Setup","text":""},{"location":"userguide/#developer-tools","title":"Developer Tools","text":"<ul> <li>Github Desktop: GitHub Desktop is a user-friendly application that simplifies the process of managing Git repositories and interacting with GitHub, providing a graphical interface for tasks like committing, branching, and syncing changes.</li> <li>Neovim: Neovim is a refactor, and sometimes redactor, in the tradition of Vim. It is not a rewrite but a continuation and extension of Vim. This command configures neovim from CTT's neovim configuration. https://github.com/ChrisTitusTech/neovim</li> <li>Sublime Text: Sublime Text is a fast, lightweight, and customizable text editor known for its simplicity, powerful features, and wide range of plugins for various programming languages.</li> <li>VS Code: Visual Studio Code (VS Code) is a lightweight, open-source code editor with built-in support for debugging, version control, and extensions for various programming languages and frameworks.</li> <li>VS Codium: VSCodium is a free, open-source version of Visual Studio Code (VS Code) that removes Microsoft-specific telemetry and branding.</li> <li>Meld: Meld is a visual diff and merge tool that helps compare files, directories, and version-controlled projects.</li> <li>Ngrok: Ngrok is a tool that creates secure, temporary tunnels to expose local servers to the internet for testing and development.</li> </ul>"},{"location":"userguide/#communication-apps","title":"Communication Apps","text":"<ul> <li>Discord: Discord is a versatile communication platform for gamers and communities, offering voice, video, and text chat features.</li> <li>Jitsi: Jitsi Meet is an open-source video conferencing tool that allows users to host and join secure meetings directly from their web browsers without the need for downloads.</li> <li>Signal: Signal is a privacy-focused messaging app that provides end-to-end encryption for secure text, voice, and video communication.</li> <li>Slack: Slack is a collaboration platform designed for team communication, featuring channels, direct messaging, file sharing, and integrations with various productivity tools.</li> <li>Telegram: Telegram is a cloud-based messaging app known for its speed and security, offering features like group chats, channels, and end-to-end encrypted calls.</li> <li>Zoom: Zoom is a widely-used video conferencing platform that allows users to host virtual meetings, webinars, and online collaboration with features like screen sharing and recording.</li> <li>Thunderbird: Thunderbird is a free, open-source email client that offers powerful features like customizable email management, a built-in calendar, and extensive add-ons for enhanced functionality.</li> </ul>"},{"location":"userguide/#office-suites","title":"Office Suites","text":""},{"location":"userguide/#pdf-suites","title":"PDF Suites","text":""},{"location":"userguide/#web-browsers","title":"Web Browsers","text":"<ul> <li>Brave: Brave is a free and open-source web browser developed by Brave Software, Inc. based on the Chromium web browser.</li> <li>Chromium: Chromium is an open-source web browser project started by Google, to provide the source code for the proprietary Google Chrome browser.</li> <li>Google Chrome: Google Chrome is a fast, secure, and free web browser, built for the modern web.</li> <li>LibreWolf: LibreWolf is a fork of Firefox, focused on privacy, security, and freedom.</li> <li>Lynx: Lynx is a highly configurable text-based web browser for use on cursor-addressable character cell terminals.</li> <li>Mozilla Firefox: Mozilla Firefox is a free and open-source web browser developed by the Mozilla Foundation.</li> <li>Thorium: Thorium is a Chromium-based browser focused on privacy and performance.</li> <li>Vivaldi: Vivaldi is a freeware, cross-platform web browser developed by Vivaldi Technologies.</li> <li>Alacritty: Alacritty is a modern terminal emulator that comes with sensible defaults, but allows for extensive configuration. By integrating with other applications, rather than reimplementing their functionality, it manages to provide a flexible set of features with high performance. The supported platforms currently consist of BSD, Linux, macOS and Windows. This command installs and condifures alacritty terminal emulator.</li> <li>Android Debloater: Universal Android Debloater (UAD) is a tool designed to help users remove bloatware and unnecessary pre-installed applications from Android devices, enhancing performance and user experience.</li> <li>Bash Prompt: The .bashrc file is a script that runs every time a new terminal session is started in Unix-like operating systems. It is used to configure the shell session, set up aliases, define functions, and more, making the terminal easier to use and more powerful. This command configures the key sections and functionalities defined in the .bashrc file from CTT's mybash repository. https://github.com/ChrisTitusTech/mybash</li> <li>Bottles: Bottles allows Windows software, like applications and games, to run on Linux. Bottles also provides tools to categorize, organize and optimize your applications.</li> <li>DWM-Titus: DWM is a dynamic window manager for X. It manages windows in tiled, monocle and floating layouts. All of the layouts can be applied dynamically, optimising the environment for the application in use and the task performed. This command installs and configures DWM and a desktop manager. The list of patches applied can be found in CTT's DWM repository https://github.com/ChrisTitusTech/dwm-titus</li> <li>Docker: Docker is an open platform that uses OS-level virtualization to deliver software in packages called containers.</li> <li>Fastfetch: Fastfetch is a neofetch-like tool for fetching system information and displaying it prettily. It is written mainly in C, with performance and customizability in mind. This command installs fastfetch and configures from CTT's mybash repository. https://github.com/ChrisTitusTech/mybash</li> <li>Flatpak / Flathub: Flatpak is a universal application sandbox for Linux that uses isolated packages from Flathub to prevent conflicts and system alterations, while alleviating dependency concerns. This command installs Flatpak and adds the Flathub repository</li> <li>Grub Theme: Installs ChrisTitusTech's Top 5 Bootloader Themes script to allow for easy customization of GRUB.</li> <li>Kitty: kitty is a free and open-source GPU-accelerated terminal emulator for Linux, macOS, and some BSD distributions, focused on performance and features. kitty is written in a mix of C and Python programming languages.  This command installs and configures kitty.</li> <li>Linutil Installer: Installs a distro-specific Linutil package locally.</li> <li>Linutil Updater: Updates your local Linutil crate installation.</li> <li>Rofi: Rofi is a window switcher, run dialog, ssh-launcher and dmenu replacement that started as a clone of simpleswitcher, written by Sean Pringle and later expanded by Dave Davenport. This command installs and configures rofi with configuration from CTT's DWM repo. https://github.com/ChrisTitusTech/dwm-titus</li> <li>Waydroid: Waydroid is an emulator that allows you to run Android apps and games on Linux.</li> <li>ZSH Prompt: The Z shell is a Unix shell that can be used as an interactive login shell and as a command interpreter for shell scripting. Zsh is an extended Bourne shell with many improvements, including some features of Bash, ksh, and tcsh. This command installs ZSH prompt and provides basic configuration.</li> </ul>"},{"location":"userguide/#gaming","title":"Gaming","text":""},{"location":"userguide/#diablo-ii-resurrected","title":"Diablo II Resurrected","text":"<ul> <li>Loot Filter: This is a loot filter for Diablo II Resurrected. It's designed to be a simple, clean, and easy to read loot filter that highlights the most important items. Works on battle.net and single player. No frills, no config, just highlights high runes and other valuable items. For more information visit: https://github.com/ChrisTitusTech/d2r-loot-filter</li> </ul>"},{"location":"userguide/#security","title":"Security","text":"<ul> <li>Firewall Baselines (CTT): Developed to ease iptables firewall configuration, UFW provides a user friendly way to create an IPv4 or IPv6 host-based firewall. This command installs UFW and configures UFW based on CTT's recommended rules. For more information visit: https://christitus.com/linux-security-mistakes</li> </ul>"},{"location":"userguide/#system-setup","title":"System Setup","text":""},{"location":"userguide/#arch-linux","title":"Arch Linux","text":"<ul> <li>Arch Server Setup: This command installs a minimal arch server setup under 5 minutes.</li> <li>Paru AUR Helper: Paru is your standard pacman wrapping AUR helper with lots of features and minimal interaction. To know more about AUR helpers visit: https://wiki.archlinux.org/title/AUR_helpers</li> <li>Yay AUR Helper: Yet Another Yogurt - An AUR Helper Written in Go. To know more about AUR helpers visit: https://wiki.archlinux.org/title/AUR_helpers</li> </ul>"},{"location":"userguide/#fedora","title":"Fedora","text":"<ul> <li>Configure DNF: Optimizes DNF for parallel downloads</li> <li>Multimedia Codecs: This script is designed to install multimedia codecs, and to ensure RPM Fusion repositories are installed.</li> <li>Nvidia Proprietary Drivers: This script is designed to download the proprietary NVIDIA drivers in Fedora.</li> <li>RPM Fusion: RPM Fusion provides software that the Fedora Project or Red Hat doesn't want to ship. That software is provided as precompiled RPMs for all current Fedora versions and current Red Hat Enterprise Linux or clones versions; you can use the RPM Fusion repositories with tools like yum and PackageKit. For more information visit: https://rpmfusion.org/</li> <li>Virtualization: Enables Virtualization through dnf</li> <li>Build Prerequisites: This script is designed to handle the installation of various software dependencies across different Linux distributions</li> <li>Full System Cleanup: This script is designed to remove unnecessary packages, clean old cache files, remove temporary files, and to empty the trash.</li> <li>Full System Update: This command updates your system to the latest packages available for your distro</li> <li>Gaming Dependencies: This script is designed to handle the installation of gaming dependencies across different Linux distributions</li> <li>Global Theme: This script is designed to handle the installation and configuration of global theming</li> <li>Remove Snaps: This script is designed to remove snap</li> <li>TTY Fonts: This Script will set the default TTY font to Terminus size 32 Bold</li> </ul>"},{"location":"userguide/#utilities","title":"Utilities","text":""},{"location":"userguide/#monitor-control","title":"Monitor Control","text":"<ul> <li>Auto Detect Displays: This script is designed to detect and apply recommended configuration for monitors connected with your system</li> <li>Change Orientation: This script is designed to change the orientation of monitors in your system</li> <li>Disable Monitor: This script is designed to disable a monitor in your system</li> <li>Duplicate Displays: This script is designed to duplicate display among multi-monitor setup in your system</li> <li>Enable Monitor: This script is designed to enable a monitor in your system</li> <li>Extend Displays: This script is designed to extend display among multi-monitor setup in your system</li> <li>Manage Arrangement: This script is designed to arrange monitors in multi-monitor setup in your system</li> <li>Reset Scaling: This script is designed to reset scaling of a monitor in your system</li> <li>Scale Monitors: This script is designed to change the scaling of monitors in your system</li> <li>Set Brightness: This script is designed to change the Brightness of monitors connected to your system</li> <li>Set Primary Monitor: This script is designed to set a Primary monitor in your system</li> <li>Set Resolution: This script is designed to change the resolution of monitors connected to your system</li> </ul>"},{"location":"userguide/#user-account-manager","title":"User Account Manager","text":"<ul> <li>Auto Mount Drive: This utility is designed to help with automating the process of mounting a drive on to your system.</li> <li>Bluetooth Manager: This utility is designed to manage bluetooth in your system</li> <li>Numlock on Startup: This utility is designed to configure auto enabling of numlock on boot</li> <li>Ollama: This utility is designed to manage ollama in your system</li> <li>Service Manager: This utility is designed to manage services in your system</li> <li>WiFi Manager: This utility is designed to manage wifi in your system</li> </ul>"}]}